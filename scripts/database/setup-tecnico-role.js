#!/usr/bin/env node

/**
 * Script para criar a role de "t√©cnico" no sistema PINOVARA
 * 
 * Este script:
 * 1. Verifica se o m√≥dulo "organizacoes" existe
 * 2. Cria a role "tecnico" no m√≥dulo organizacoes
 * 3. Configura as permiss√µes adequadas
 */

const { PrismaClient } = require('@prisma/client');

async function setupTecnicoRole() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîß Configurando role de T√©cnico...\n');

    // 1. Verificar/Criar m√≥dulo "organizacoes"
    console.log('üìã Verificando m√≥dulo "organizacoes"...');
    let organizacoesModule = await prisma.modules.findFirst({
      where: { name: 'organizacoes' }
    });

    if (!organizacoesModule) {
      console.log('üì¶ Criando m√≥dulo "organizacoes"...');
      organizacoesModule = await prisma.modules.create({
        data: {
          name: 'organizacoes',
          description: 'M√≥dulo de gerenciamento de organiza√ß√µes',
          active: true,
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log('‚úÖ M√≥dulo "organizacoes" criado com ID:', organizacoesModule.id);
    } else {
      console.log('‚úÖ M√≥dulo "organizacoes" j√° existe (ID:', organizacoesModule.id + ')');
    }

    // 2. Verificar/Criar role "tecnico"
    console.log('\nüë∑ Verificando role "tecnico"...');
    let tecnicoRole = await prisma.roles.findFirst({
      where: { 
        name: 'tecnico',
        moduleId: organizacoesModule.id
      }
    });

    if (!tecnicoRole) {
      console.log('üõ†Ô∏è Criando role "tecnico"...');
      tecnicoRole = await prisma.roles.create({
        data: {
          name: 'tecnico',
          description: 'T√©cnico de campo - Acesso limitado √†s organiza√ß√µes criadas por ele',
          moduleId: organizacoesModule.id,
          active: true,
          createdAt: new Date(),
          updatedAt: new Date()
        }
      });
      console.log('‚úÖ Role "tecnico" criada com ID:', tecnicoRole.id);
    } else {
      console.log('‚úÖ Role "tecnico" j√° existe (ID:', tecnicoRole.id + ')');
    }

    // 3. Mostrar resumo das roles do sistema
    console.log('\nüìä Resumo das Roles do Sistema:');
    const allRoles = await prisma.roles.findMany({
      include: {
        modules: true,
        user_roles: true
      },
      orderBy: [
        { modules: { name: 'asc' } },
        { name: 'asc' }
      ]
    });

    const rolesByModule = {};
    for (const role of allRoles) {
      const moduleName = role.modules.name;
      if (!rolesByModule[moduleName]) {
        rolesByModule[moduleName] = [];
      }
      rolesByModule[moduleName].push({
        name: role.name,
        description: role.description,
        users: role.user_roles.length,
        active: role.active
      });
    }

    for (const [moduleName, roles] of Object.entries(rolesByModule)) {
      console.log(`\nüè∑Ô∏è  M√≥dulo: ${moduleName}`);
      for (const role of roles) {
        const status = role.active ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${role.name} (${role.users} usu√°rios) - ${role.description}`);
      }
    }

    // 4. Instru√ß√µes para uso
    console.log('\nüìã INSTRU√á√ïES PARA USO DA ROLE T√âCNICO:');
    console.log('');
    console.log('1. Para atribuir a role a um usu√°rio via Admin:');
    console.log('   - Acesse o painel administrativo');
    console.log('   - V√° em "Usu√°rios" > "Gerenciar Pap√©is"');
    console.log('   - Selecione a role "tecnico" do m√≥dulo "organizacoes"');
    console.log('');
    console.log('2. Como funciona:');
    console.log('   - T√©cnicos s√≥ veem organiza√ß√µes que eles criaram');
    console.log('   - Quando um t√©cnico cria uma organiza√ß√£o, o id_tecnico √© automaticamente definido');
    console.log('   - T√©cnicos n√£o podem acessar organiza√ß√µes de outros t√©cnicos');
    console.log('   - Administradores continuam com acesso total');
    console.log('');
    console.log('3. Para atribuir manualmente via SQL (exemplo):');
    console.log(`   INSERT INTO pinovara.user_roles (user_id, role_id, created_at, updated_at)`);
    console.log(`   VALUES ([USER_ID], ${tecnicoRole.id}, NOW(), NOW());`);
    console.log('');
    
    console.log('üöÄ Setup da role T√©cnico conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro ao configurar role de t√©cnico:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script se chamado diretamente
if (require.main === module) {
  setupTecnicoRole()
    .then(() => {
      console.log('\n‚úÖ Script executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Falha na execu√ß√£o do script:', error);
      process.exit(1);
    });
}

module.exports = { setupTecnicoRole };
