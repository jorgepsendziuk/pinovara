name: Deploy Full (with Prisma)

# 🚀 PINOVARA Deploy FULL - COMPLETE REGENERATION
# ⚡ REGENERATES PRISMA - For schema changes (8 minutes)
# 📋 BACKUP SYSTEM - Timestamp-based backups
# 🔧 MANUAL ONLY - Use when Prisma schema changed

on:
  workflow_dispatch:
    inputs:
      confirm_regeneration:
        description: 'Confirm Prisma regeneration (type "yes")'
        required: true
        default: 'no'

jobs:
  deploy-full:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_regeneration == 'yes'

    steps:
    - name: 🚀 Starting FULL Deploy with Prisma
      run: |
        echo "🎯 PINOVARA Deploy FULL - COMPLETE REGENERATION"
        echo "⚡ REGENERATES Prisma client - For schema changes"
        echo "⏱️ Expected time: ~8 minutes (includes Prisma generation)"
        echo "📅 $(date)"

    - name: 🔧 Validate Secrets
      run: |
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "❌ SSH_PRIVATE_KEY secret not configured"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "❌ SERVER_HOST secret not configured"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "❌ SERVER_USER secret not configured"
          exit 1
        fi
        echo "✅ All secrets configured"

    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🏗️ Build Backend
      working-directory: ./backend
      run: |
        echo "🔨 Building backend..."
        npm ci
        npm run build
        echo "✅ Backend built successfully"

    - name: 🎨 Build Frontend
      working-directory: ./frontend
      run: |
        echo "🎨 Building frontend..."
        npm ci
        echo "📝 Generating version info..."
        node scripts/generate-version.cjs
        npm run build
        echo "✅ Frontend built successfully"

    - name: 🔐 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: 🚀 Deploy to Server (FULL)
      run: |
        echo "🚀 Starting FULL deployment to ${{ secrets.SERVER_HOST }}..."

        # Create temp directory
        DEPLOY_DIR="/tmp/pinovara-deploy-full-$(date +%s)"
        mkdir -p $DEPLOY_DIR

        # Copy files
        echo "📋 Preparing deployment files..."
        cp -r backend/package*.json backend/dist backend/prisma $DEPLOY_DIR/ 2>/dev/null || true
        cp -r frontend/dist $DEPLOY_DIR/frontend-dist 2>/dev/null || true

        # Create env file if config.env exists
        if [ -f "backend/config.env" ]; then
          cp backend/config.env $DEPLOY_DIR/.env
        else
          echo 'NODE_ENV=production' > $DEPLOY_DIR/.env
          echo 'PORT=3001' >> $DEPLOY_DIR/.env
          echo 'DATABASE_URL="postgresql://pinovara:pinovara@bd.pinovaraufba.com.br:5432/pinovara?schema=pinovara"' >> $DEPLOY_DIR/.env
          echo 'JWT_SECRET="pinovara-secret-key-change-in-production"' >> $DEPLOY_DIR/.env
        fi

        # Create PM2 config
        cat > $DEPLOY_DIR/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'pinovara-backend',
            script: 'dist/server.js',
            cwd: '/var/www/pinovara/backend',
            instances: 1,
            exec_mode: 'fork',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            }
          }]
        };
        EOF

        # Create FULL deploy script
        cat > $DEPLOY_DIR/deploy-full.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "🚀 PINOVARA v4.2 - FULL DEPLOY WITH PRISMA REGENERATION..."
        echo "⚡ REGENERATING Prisma client (expected ~8 minutes)"
        echo "📋 BACKUP system enabled - Creating timestamped backups"

        # Check PM2
        if ! command -v pm2 &> /dev/null; then
          echo "❌ PM2 not installed"
          exit 1
        fi
        echo "✅ PM2 available"

        # Backup System - Create timestamped backups before deployment
        BACKUP_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        BACKUP_DIR="/var/www/pinovara/backup"
        
        echo "💾 CREATING BACKUPS - Timestamp: $BACKUP_TIMESTAMP"
        
        # Create backup directory structure
        sudo mkdir -p "$BACKUP_DIR"
        sudo chown -R $USER:$USER "$BACKUP_DIR"
        
        # Backup existing backend if it exists
        if [ -d "/var/www/pinovara/backend" ]; then
          echo "💾 Backing up existing backend..."
          mv /var/www/pinovara/backend "$BACKUP_DIR/backend-$BACKUP_TIMESTAMP"
          echo "✅ Backend backed up to: $BACKUP_DIR/backend-$BACKUP_TIMESTAMP"
        else
          echo "ℹ️ No existing backend to backup"
        fi
        
        # Backup existing frontend if it exists
        if [ -d "/var/www/html" ] && [ "$(ls -A /var/www/html 2>/dev/null)" ]; then
          echo "💾 Backing up existing frontend..."
          sudo mkdir -p "$BACKUP_DIR/frontend-$BACKUP_TIMESTAMP"
          sudo chown -R $USER:$USER "$BACKUP_DIR/frontend-$BACKUP_TIMESTAMP"
          cp -r /var/www/html/* "$BACKUP_DIR/frontend-$BACKUP_TIMESTAMP/" 2>/dev/null || true
          echo "✅ Frontend backed up to: $BACKUP_DIR/frontend-$BACKUP_TIMESTAMP"
        else
          echo "ℹ️ No existing frontend to backup"
        fi
        
        # Cleanup old backups - keep only last 3 backups of each type
        echo "🧹 Cleaning up old backups (keeping last 3)..."
        
        # Clean backend backups
        cd "$BACKUP_DIR" && ls -d backend-* 2>/dev/null | head -n -3 | xargs rm -rf 2>/dev/null || true
        
        # Clean frontend backups
        cd "$BACKUP_DIR" && ls -d frontend-* 2>/dev/null | head -n -3 | xargs rm -rf 2>/dev/null || true
        
        echo "✅ Backup system completed"

        # Create directories with proper ownership from start
        echo "👤 Current user: $(whoami)"
        echo "👤 \$USER variable: $USER"
        sudo mkdir -p /var/www/pinovara
        sudo chown -R $USER:$USER /var/www/pinovara

        # Stop existing processes
        pm2 stop pinovara-backend 2>/dev/null || true
        pm2 delete pinovara-backend 2>/dev/null || true

        # Create fresh backend directory (old one already backed up)
        mkdir -p /var/www/pinovara/backend

        # Copy files with explicit paths
        echo "📋 Deploying backend files..."
        DEPLOY_SOURCE="$DEPLOY_TMP_DIR"
        echo "📂 Source directory: $DEPLOY_SOURCE"
        echo "📂 Target directory: /var/www/pinovara/backend"

        # Navigate to source directory for copying
        cd "$DEPLOY_SOURCE" || { echo "❌ Failed to cd to $DEPLOY_SOURCE"; exit 1; }

        # Copy files with full paths (no sudo needed now)
        if [ -f "package.json" ]; then
            cp package*.json /var/www/pinovara/backend/
            echo "✅ package.json copied"
        else
            echo "❌ package.json not found in $DEPLOY_SOURCE"
        fi

        if [ -f ".env" ]; then
            cp .env /var/www/pinovara/backend/
            echo "✅ .env copied"
        else
            echo "❌ .env not found in $DEPLOY_SOURCE"
        fi

        if [ -f "ecosystem.config.js" ]; then
            cp ecosystem.config.js /var/www/pinovara/backend/
            echo "✅ ecosystem.config.js copied"
        else
            echo "❌ ecosystem.config.js not found in $DEPLOY_SOURCE"
            ls -la "$DEPLOY_SOURCE"/
        fi

        if [ -d "dist" ]; then
            cp -r dist /var/www/pinovara/backend/
            echo "✅ dist/ copied"
        else
            echo "❌ dist/ not found in $DEPLOY_SOURCE"
        fi

        if [ -d "prisma" ]; then
            cp -r prisma /var/www/pinovara/backend/
            echo "✅ prisma/ copied"
        else
            echo "❌ prisma/ not found in $DEPLOY_SOURCE"
        fi

        # Navigate to target directory for execution
        cd /var/www/pinovara/backend || { echo "❌ Failed to cd to /var/www/pinovara/backend"; exit 1; }
        echo "📂 Current directory: $(pwd)"
        echo "📁 Directory contents: $(ls -la)"

        # Ensure we're in the correct directory and it has the right files
        if [ ! -f "package.json" ]; then
          echo "❌ package.json not found in current directory"
          echo "📂 Current dir: $(pwd)"
          echo "📁 Contents: $(ls -la)"
          exit 1
        fi
        
        sudo chmod -R 777 /var/www/pinovara/backend 

        # Install dependencies with explicit working directory
        echo "📦 Installing dependencies..."
        cd /var/www/pinovara/backend && sudo npm ci --production --unsafe-perm

        # FULL PRISMA REGENERATION (The main difference!)
        echo "🗄️ FULL Prisma client generation (this will take ~8 minutes)..."
        echo "⚡ REGENERATING from schema (not using cache)..."
        cd /var/www/pinovara/backend && sudo npx prisma generate
        echo "✅ Prisma client generated successfully (COMPLETE!)"
        
        # NOTE: Database schema is NEVER modified by deploy
        # System adapts to existing database structure

        # Start application
        echo "🚀 Starting application..."
        echo "📂 Current directory: $(pwd)"
        echo "📄 Files in directory: $(ls -la)"

        if [ -f "ecosystem.config.js" ]; then
            echo "✅ ecosystem.config.js found, starting PM2..."
            pm2 start ecosystem.config.js --env production
            pm2 save
            echo "✅ Application started successfully"
        else
            echo "❌ ecosystem.config.js not found in $(pwd)"
            echo "📄 Available files:"
            ls -la
            exit 1
        fi

        # Deploy frontend
        echo "🎨 Deploying frontend..."
        sudo mkdir -p /var/www/html
        sudo chown -R $USER:$USER /var/www/html
        # Frontend backup already done above, now clean and deploy fresh files
        rm -rf /var/www/html/* 2>/dev/null || true
        
        # Navigate to source directory for frontend deployment
        cd "$DEPLOY_TMP_DIR" || { echo "❌ Failed to cd to $DEPLOY_TMP_DIR"; exit 1; }
        
        if [ -d "frontend-dist" ]; then
          echo "📁 Found frontend-dist directory"
          ls -la frontend-dist/ | head -5
          cp -r frontend-dist/* /var/www/html/
          echo "✅ Frontend deployed successfully"
          echo "📊 Files in /var/www/html:"
          ls -la /var/www/html/ | head -5
        else
          echo "❌ Frontend files not found"
          echo "📂 Available directories:"
          ls -la "$DEPLOY_TMP_DIR"
        fi

        echo "✅ FULL DEPLOYMENT COMPLETED SUCCESSFULLY!"
        
        # Show backup status
        echo ""
        echo "💾 BACKUP STATUS:"
        if [ -d "$BACKUP_DIR" ]; then
          echo "📁 Backup directory: $BACKUP_DIR"
          echo "📊 Available backups:"
          ls -la "$BACKUP_DIR" | grep -E "(backend-|frontend-)" | tail -10 || echo "   No backups found"
        else
          echo "⚠️ No backup directory found"
        fi
        EOF

        chmod +x $DEPLOY_DIR/deploy-full.sh

        # Upload and execute
        scp -r $DEPLOY_DIR ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "
        echo '👤 SSH User: ${{ secrets.SERVER_USER }}'
        echo '👤 Current user in SSH session: \$(whoami)'
        echo '👤 \$USER variable in SSH: '\$USER
        DEPLOY_TMP_DIR=\$(ls -d /tmp/pinovara-deploy-full-* | head -1)
        export DEPLOY_TMP_DIR
        bash \$DEPLOY_TMP_DIR/deploy-full.sh
        "

        # Cleanup
        rm -rf $DEPLOY_DIR
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'rm -rf /tmp/pinovara-deploy-full-*'

    - name: ✅ Verify Deployment
      run: |
        echo "🔍 Verifying FULL deployment..."
        sleep 10

        # Check backend
        if ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'curl -f http://localhost:3001/health > /dev/null 2>&1'; then
          echo "✅ Backend is running"
        else
          echo "❌ Backend not responding"
        fi

        # Check frontend
        if ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'curl -f http://localhost/ > /dev/null 2>&1'; then
          echo "✅ Frontend is running"
        else
          echo "⚠️ Frontend may need Nginx configuration"
        fi

        echo "🎉 FULL Deployment verification complete!"
