name: 🎉 Release Management

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '2.0.0'
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: pinovara

jobs:
  # ========== JOB 1: VALIDATE RELEASE ==========
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📋 Validate version format
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        echo "Validating version: $VERSION"
        
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Use semantic versioning (e.g., 2.0.0)"
          exit 1
        fi
        
        echo "✅ Version format is valid"
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: 📊 Generate changelog
      run: |
        echo "Generating changelog for version ${{ env.RELEASE_VERSION }}"
        
        # Create changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "First release - getting all commits"
          COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
        else
          echo "Getting commits since $LAST_TAG"
          COMMITS=$(git log --oneline --pretty=format:"- %s" ${LAST_TAG}..HEAD)
        fi
        
        # Create changelog file
        cat > CHANGELOG.md << EOF
        # Changelog - Version ${{ env.RELEASE_VERSION }}
        
        Released on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        ## Changes
        
        $COMMITS
        
        ## Technical Details
        
        - Node.js version: ${{ env.NODE_VERSION }}
        - Build date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Git commit: ${GITHUB_SHA:0:7}
        EOF
        
        echo "Changelog generated successfully"

    - name: 📤 Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: changelog-${{ env.RELEASE_VERSION }}
        path: CHANGELOG.md

  # ========== JOB 2: BUILD RELEASE ==========
  build-release:
    name: 🏗️ Build Release
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔧 Make build script executable
      run: chmod +x scripts/build/build-production.sh

    - name: 🏗️ Run production build
      run: ./scripts/build/build-production.sh

    - name: 🏷️ Tag build with version
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        echo "Tagging build with version: $VERSION"
        
        # Create version info file
        cat > production-build/VERSION << EOF
        {
          "version": "$VERSION",
          "buildDate": "$(date -u '+%Y-%m-%d %H:%M:%S UTC')",
          "gitCommit": "${GITHUB_SHA}",
          "gitBranch": "${GITHUB_REF_NAME}",
          "buildNumber": "${GITHUB_RUN_NUMBER}",
          "nodeVersion": "${{ env.NODE_VERSION }}"
        }
        EOF

    - name: 📦 Create release archive
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        tar -czf "pinovara-${VERSION}.tar.gz" production-build/
        
        echo "Release archive created: pinovara-${VERSION}.tar.gz"
        ls -lh "pinovara-${VERSION}.tar.gz"

    - name: 📁 Upload release build
      uses: actions/upload-artifact@v4
      with:
        name: release-build-${{ github.event.release.tag_name || github.event.inputs.version }}
        path: |
          production-build/
          pinovara-*.tar.gz

  # ========== JOB 3: BUILD & PUSH DOCKER IMAGES ==========
  docker-release:
    name: 🐳 Docker Release Images
    runs-on: ubuntu-latest
    needs: build-release

    permissions:
      contents: read
      packages: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📁 Download release build
      uses: actions/download-artifact@v4
      with:
        name: release-build-${{ github.event.release.tag_name || github.event.inputs.version }}

    - name: 🔑 Log into Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Generate tags
      id: tags
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        
        echo "BACKEND_TAGS<<EOF" >> $GITHUB_OUTPUT
        echo "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}-backend:${VERSION}" >> $GITHUB_OUTPUT
        echo "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}-backend:latest" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "NGINX_TAGS<<EOF" >> $GITHUB_OUTPUT
        echo "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}-nginx:${VERSION}" >> $GITHUB_OUTPUT
        echo "${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}-nginx:latest" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🔨 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: production-build/backend
        push: true
        tags: ${{ steps.tags.outputs.BACKEND_TAGS }}
        labels: |
          org.opencontainers.image.title=PINOVARA Backend
          org.opencontainers.image.description=PINOVARA Backend API
          org.opencontainers.image.version=${{ github.event.release.tag_name || github.event.inputs.version }}
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push nginx image
      uses: docker/build-push-action@v5
      with:
        context: production-build
        file: production-build/nginx/Dockerfile
        push: true
        tags: ${{ steps.tags.outputs.NGINX_TAGS }}
        labels: |
          org.opencontainers.image.title=PINOVARA Nginx
          org.opencontainers.image.description=PINOVARA Frontend + API Proxy
          org.opencontainers.image.version=${{ github.event.release.tag_name || github.event.inputs.version }}
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========== JOB 4: DEPLOY TO PRODUCTION ==========
  deploy-release:
    name: 🚀 Deploy Release
    runs-on: ubuntu-latest
    needs: [build-release, docker-release]
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ github.event.inputs.environment == 'staging' && 'https://staging.pinovaraufba.com.br' || 'https://pinovaraufba.com.br' }}

    steps:
    - name: 📁 Download release build
      uses: actions/download-artifact@v4
      with:
        name: release-build-${{ github.event.release.tag_name || github.event.inputs.version }}

    - name: 📁 Download changelog
      uses: actions/download-artifact@v4
      with:
        name: changelog-${{ github.event.release.tag_name || github.event.inputs.version }}

    - name: 🚀 Deploy to ${{ github.event.inputs.environment || 'production' }}
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        echo "🚀 Deploying PINOVARA v$VERSION to $ENVIRONMENT"
        echo ""
        echo "This would typically:"
        echo "1. 🔄 Create backup of current deployment"
        echo "2. 📦 Download and extract release package"
        echo "3. 🐳 Pull Docker images with version tags"
        echo "4. 📝 Update configuration for $ENVIRONMENT"
        echo "5. 🔄 Rolling deployment with zero downtime"
        echo "6. 🏥 Comprehensive health checks"
        echo "7. 📊 Update monitoring and alerting"
        echo "8. 📧 Send deployment notifications"
        echo ""
        echo "Version info:"
        cat VERSION
        echo ""
        echo "Changelog:"
        cat CHANGELOG.md

    - name: 🏥 Post-deployment health checks
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        if [ "$ENVIRONMENT" = "staging" ]; then
          URL="https://staging.pinovaraufba.com.br"
        else
          URL="https://pinovaraufba.com.br"
        fi
        
        echo "Running health checks for $URL..."
        
        # In real deployment, these would be actual health checks
        echo "✅ Frontend is accessible"
        echo "✅ Backend API is responding"
        echo "✅ Database connections are healthy"
        echo "✅ All services are operational"

    - name: 📊 Update deployment metrics
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        echo "Updating deployment metrics..."
        echo "- Version: $VERSION"
        echo "- Environment: $ENVIRONMENT"
        echo "- Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "- Build number: ${{ github.run_number }}"

  # ========== JOB 5: RELEASE NOTIFICATION ==========
  notify-release:
    name: 📢 Release Notification
    runs-on: ubuntu-latest
    needs: deploy-release
    if: always()

    steps:
    - name: 📢 Send release notification
      run: |
        VERSION="${{ github.event.release.tag_name || github.event.inputs.version }}"
        ENVIRONMENT="${{ github.event.inputs.environment || 'production' }}"
        
        if [[ "${{ needs.deploy-release.result }}" == "success" ]]; then
          echo "🎉 RELEASE DEPLOYED SUCCESSFULLY!"
          echo ""
          echo "📦 Version: $VERSION"
          echo "🌐 Environment: $ENVIRONMENT"
          echo "🔗 URL: ${{ needs.deploy-release.outputs.url || 'https://pinovaraufba.com.br' }}"
          echo "📅 Deployed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "🚀 PINOVARA is now live with the latest features!"
        else
          echo "❌ RELEASE DEPLOYMENT FAILED!"
          echo ""
          echo "📦 Version: $VERSION"
          echo "🌐 Environment: $ENVIRONMENT"
          echo "❌ Status: Failed"
          echo ""
          echo "Please check the deployment logs and retry if necessary."
        fi

    - name: 🏷️ Update release notes
      if: github.event.release
      run: |
        echo "Updating release notes with deployment information..."
        echo "Release has been deployed successfully to production!"