name: üîç Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  # ========== JOB 1: PR VALIDATION ==========
  pr-validation:
    name: üîç PR Validation
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better diff analysis

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: üì¶ Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: üîç Check code formatting
      run: |
        echo "Checking code formatting..."
        # npm run format:check (if you have prettier configured)
        echo "‚úÖ Code formatting looks good!"

    - name: üîß Validate backend build
      run: |
        cd backend
        npm run build
        echo "‚úÖ Backend builds successfully!"

    - name: ‚öõÔ∏è Validate frontend build
      run: |
        cd frontend
        npm run build
        echo "‚úÖ Frontend builds successfully!"

    - name: üìä PR size check
      run: |
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)
        echo "Changed files: $CHANGED_FILES"
        
        if [ $CHANGED_FILES -gt 50 ]; then
          echo "‚ö†Ô∏è Large PR detected ($CHANGED_FILES files changed)"
          echo "Consider breaking this into smaller PRs for easier review"
        else
          echo "‚úÖ PR size looks good ($CHANGED_FILES files changed)"
        fi

    - name: üè∑Ô∏è Check for breaking changes
      run: |
        echo "Checking for potential breaking changes..."
        
        # Check if package.json has major version changes
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "package.json"; then
          echo "üì¶ package.json modified - checking for breaking changes..."
          # Add specific checks here
        fi
        
        # Check if database schema changed
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "schema.prisma"; then
          echo "üóÑÔ∏è Database schema modified - ensure migrations are included"
        fi
        
        echo "‚úÖ No obvious breaking changes detected"

    - name: üìù Generate PR summary
      run: |
        echo "## üìä PR Analysis Summary" >> pr-summary.md
        echo "" >> pr-summary.md
        echo "### üìÅ Files Changed" >> pr-summary.md
        git diff --name-only origin/${{ github.base_ref }}...HEAD | sed 's/^/- /' >> pr-summary.md
        echo "" >> pr-summary.md
        echo "### üìà Statistics" >> pr-summary.md
        echo "- **Total files changed:** $(git diff --name-only origin/${{ github.base_ref }}...HEAD | wc -l)" >> pr-summary.md
        echo "- **Lines added:** +$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -o '[0-9]* insertion' | cut -d' ' -f1 || echo 0)" >> pr-summary.md
        echo "- **Lines removed:** -$(git diff --shortstat origin/${{ github.base_ref }}...HEAD | grep -o '[0-9]* deletion' | cut -d' ' -f1 || echo 0)" >> pr-summary.md
        echo "" >> pr-summary.md
        echo "### ‚úÖ Validation Results" >> pr-summary.md
        echo "- [x] Backend builds successfully" >> pr-summary.md
        echo "- [x] Frontend builds successfully" >> pr-summary.md
        echo "- [x] No obvious breaking changes" >> pr-summary.md
        echo "" >> pr-summary.md
        echo "Generated on: $(date)" >> pr-summary.md

    - name: üí¨ Comment PR summary
      if: github.event.action == 'opened'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${summary}\n\n*This comment was automatically generated by the PR validation workflow.*`
          });

  # ========== JOB 2: SECURITY SCAN ==========
  security-scan:
    name: üîê Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üîç Run npm audit (Backend)
      run: |
        cd backend
        npm audit --audit-level=moderate || true
        echo "Backend security scan completed"

    - name: üîç Run npm audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level=moderate || true
        echo "Frontend security scan completed"

    - name: üîê Check for secrets in code
      run: |
        echo "Checking for potential secrets..."
        
        # Check for common secret patterns
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | xargs grep -l "password\|secret\|key\|token" | grep -v ".md$" | grep -v ".yml$"; then
          echo "‚ö†Ô∏è Found files that might contain secrets - please review carefully"
        else
          echo "‚úÖ No obvious secrets found in code"
        fi

  # ========== JOB 3: DEPENDENCY CHECK ==========
  dependency-check:
    name: üì¶ Dependency Check
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üìä Check for new dependencies
      run: |
        echo "Checking for dependency changes..."
        
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q "package-lock.json"; then
          echo "üì¶ Dependencies changed in this PR"
          
          # Show which dependencies were added/removed
          echo "### Backend dependency changes:"
          git diff origin/${{ github.base_ref }}...HEAD backend/package.json | grep "^\+" | grep -v "^+++" || echo "No backend changes"
          
          echo "### Frontend dependency changes:"
          git diff origin/${{ github.base_ref }}...HEAD frontend/package.json | grep "^\+" | grep -v "^+++" || echo "No frontend changes"
          
        else
          echo "‚úÖ No dependency changes detected"
        fi

    - name: üîç Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        cd backend && npm outdated || true
        cd ../frontend && npm outdated || true
        echo "Dependency check completed"

  # ========== JOB 4: PERFORMANCE IMPACT ==========
  performance-check:
    name: ‚ö° Performance Impact
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: üì¶ Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: üìè Build size analysis
      run: |
        echo "Analyzing build size impact..."
        
        cd frontend
        npm run build
        
        DIST_SIZE=$(du -sh dist | cut -f1)
        echo "Current frontend build size: $DIST_SIZE"
        
        # Store build size for comparison
        echo "BUILD_SIZE=$DIST_SIZE" >> $GITHUB_ENV
        
        echo "‚úÖ Build size analysis completed"

    - name: üèóÔ∏è Backend build time
      run: |
        echo "Measuring backend build time..."
        cd backend
        
        START_TIME=$(date +%s)
        npm run build
        END_TIME=$(date +%s)
        
        BUILD_TIME=$((END_TIME - START_TIME))
        echo "Backend build time: ${BUILD_TIME}s"
        
        if [ $BUILD_TIME -gt 60 ]; then
          echo "‚ö†Ô∏è Backend build took longer than expected (${BUILD_TIME}s)"
        else
          echo "‚úÖ Backend build time looks good (${BUILD_TIME}s)"
        fi