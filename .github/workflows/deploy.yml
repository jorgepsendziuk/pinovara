name: Deploy to Production

# Workflow para deploy autom√°tico do PINOVARA
# Pr√©-requisitos na VM:
# - Node.js 18+
# - PM2 instalado globalmente
# - PostgreSQL configurado
# - Nginx configurado (opcional)
# - Chaves SSH configuradas
#
# Secrets necess√°rias no GitHub:
# - SSH_PRIVATE_KEY: Chave privada SSH
# - SERVER_HOST: pinovaraufba.com.br
# - SERVER_USER: Usu√°rio SSH (ubuntu, etc.)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Validate Configuration
      run: |
        echo "üîß Validating deployment configuration..."
        echo ""
        echo "üìã REQUIRED GitHub Secrets Configuration:"
        echo "=========================================="
        echo ""
        echo "Go to: Repository Settings ‚Üí Secrets and variables ‚Üí Actions"
        echo ""
        echo "Add these secrets:"
        echo ""
        echo "1. SSH_PRIVATE_KEY"
        echo "   How to get the value:"
        echo "   ‚Ä¢ Run: cat ~/.ssh/id_rsa"
        echo "   ‚Ä¢ Copy the ENTIRE output (including -----BEGIN OPENSSH PRIVATE KEY-----)"
        echo "   ‚Ä¢ Make sure to include all lines with proper line breaks"
        echo ""
        echo "2. SERVER_HOST"
        echo "   Value: pinovaraufba.com.br"
        echo ""
        echo "3. SERVER_USER"
        echo "   Value: ubuntu"
        echo "   (or your SSH username on the server)"
        echo ""
        echo "‚ùå Deployment will fail until these secrets are configured!"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache backend dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ./backend/node_modules
        key: ${{ runner.os }}-backend-node-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-node-

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Cache frontend dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ./frontend/node_modules
        key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-node-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Setup SSH
      run: |
        # Validate required secrets
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "‚ùå Error: SSH_PRIVATE_KEY secret is not configured"
          exit 1
        fi

        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "‚ùå Error: SERVER_HOST secret is not configured"
          exit 1
        fi

        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "‚ùå Error: SERVER_USER secret is not configured"
          exit 1
        fi

        echo "‚úÖ All required secrets are configured"

        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Criar diret√≥rio tempor√°rio para arquivos
        DEPLOY_DIR="/tmp/pinovara-deploy-$(date +%s)"
        mkdir -p $DEPLOY_DIR

        # Copiar arquivos necess√°rios
        cp -r backend/package*.json backend/dist backend/prisma $DEPLOY_DIR/
        cp -r frontend/dist $DEPLOY_DIR/frontend-dist

        # Verificar se arquivo de configura√ß√£o existe
        if [ -f "backend/config.env" ]; then
          cp backend/config.env $DEPLOY_DIR/
        else
          echo "Aviso: config.env n√£o encontrado. Criando configura√ß√£o b√°sica..."
          echo 'NODE_ENV=production' > $DEPLOY_DIR/.env
          echo 'PORT=3001' >> $DEPLOY_DIR/.env
          echo 'DATABASE_URL="postgresql://user:password@localhost:5432/pinovara"' >> $DEPLOY_DIR/.env
          echo 'JWT_SECRET="your-super-secret-jwt-key-change-this-in-production"' >> $DEPLOY_DIR/.env
        fi

        # Arquivo de configura√ß√£o do PM2
        cat > $DEPLOY_DIR/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'pinovara-backend',
            script: 'dist/server.js',
            cwd: '/var/www/pinovara/backend',
            instances: 1,
            exec_mode: 'fork',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            },
            env_production: {
              NODE_ENV: 'production',
              PORT: 3001
            }
          }]
        };
        EOF

        # Script de deploy
        cat > $DEPLOY_DIR/deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄ Iniciando deploy do PINOVARA..."

        # Navegar para o diret√≥rio dos arquivos de deploy
        cd /tmp || exit 1
        echo "üìÅ Diret√≥rio atual: $(pwd)"
        echo "üìÅ Arquivos dispon√≠veis: $(ls -la)"

        # Verificar se PM2 est√° instalado
        if ! command -v pm2 &> /dev/null; then
          echo "‚ùå PM2 n√£o est√° instalado. Instale com: npm install -g pm2"
          exit 1
        fi

        echo "‚úÖ PM2 est√° instalado"

        # Fun√ß√£o para rollback em caso de erro
        rollback() {
          echo "‚ùå Erro durante o deploy. Executando rollback..."
          # Stop and delete PM2 process if it exists
          if pm2 list 2>/dev/null | grep -q pinovara-backend; then
            pm2 stop pinovara-backend 2>/dev/null || true
            pm2 delete pinovara-backend 2>/dev/null || true
          fi
          if [ -d "/var/www/pinovara/backup" ]; then
            rm -rf /var/www/pinovara/backend
            cp -r /var/www/pinovara/backup /var/www/pinovara/backend || true
            cd /var/www/pinovara/backend
            pm2 start ecosystem.config.js --env production 2>/dev/null || true
          fi
          exit 1
        }

        trap rollback ERR

        # Criar diret√≥rios
        sudo mkdir -p /var/www/pinovara
        sudo chown -R $USER:$USER /var/www/pinovara

        # Backup da vers√£o anterior
        if [ -d "/var/www/pinovara/backend" ]; then
          echo "üì¶ Criando backup da vers√£o anterior..."
          rm -rf /var/www/pinovara/backup
          cp -r /var/www/pinovara/backend /var/www/pinovara/backup
        fi

        # Deploy do backend
        echo "üì¶ Deploying backend..."
        if [ -d "/var/www/pinovara/backend" ]; then
          cd /var/www/pinovara/backend
          # Stop and delete PM2 process if it exists
          if pm2 list | grep -q pinovara-backend; then
            echo "üõë Stopping existing PM2 process..."
            pm2 stop pinovara-backend 2>/dev/null || true
            pm2 delete pinovara-backend 2>/dev/null || true
          fi
        fi

        rm -rf /var/www/pinovara/backend
        mkdir -p /var/www/pinovara/backend

        # Copy deployment files to backend directory
        echo "üìã Copiando arquivos de deploy..."
        if [ -f "package.json" ]; then cp package*.json /var/www/pinovara/backend/; fi
        if [ -f "ecosystem.config.js" ]; then cp ecosystem.config.js /var/www/pinovara/backend/; fi
        if [ -d "dist" ]; then cp -r dist /var/www/pinovara/backend/; fi
        if [ -d "prisma" ]; then cp -r prisma /var/www/pinovara/backend/; fi
        if [ -f ".env" ]; then cp .env /var/www/pinovara/backend/; fi

        cd /var/www/pinovara/backend
        echo "üìÅ Arquivos copiados: $(ls -la)"

        # Instalar depend√™ncias de produ√ß√£o
        echo "üì¶ Instalando depend√™ncias..."
        npm ci --production

        # Configurar banco de dados
        echo "üóÑÔ∏è Configurando banco de dados..."
        npx prisma generate
        npx prisma db push --accept-data-loss || npx prisma db push

        # Iniciar aplica√ß√£o com PM2
        echo "üöÄ Iniciando aplica√ß√£o..."
        echo "üìÅ Diret√≥rio atual: $(pwd)"
        echo "üìÅ Arquivos no diret√≥rio: $(ls -la)"

        # Ensure PM2 daemon is running
        pm2 ping 2>/dev/null || pm2 resurrect 2>/dev/null || true

        # Start the application
        if [ -f "ecosystem.config.js" ]; then
          echo "üìÑ Encontrado ecosystem.config.js"
          if pm2 start ecosystem.config.js --env production; then
            echo "‚úÖ Aplica√ß√£o iniciada com sucesso"
            pm2 save 2>/dev/null || true
            pm2 list
          else
            echo "‚ùå Falha ao iniciar aplica√ß√£o com PM2"
            pm2 logs pinovara-backend --lines 10 2>/dev/null || echo "N√£o foi poss√≠vel obter logs do PM2"
            exit 1
          fi
        else
          echo "‚ùå Arquivo ecosystem.config.js n√£o encontrado!"
          ls -la
          exit 1
        fi

        # Aguardar aplica√ß√£o iniciar
        echo "‚è≥ Aguardando aplica√ß√£o iniciar..."
        sleep 10

        # Verificar se aplica√ß√£o est√° funcionando
        if curl -f http://localhost:3001/health > /dev/null 2>&1; then
          echo "‚úÖ Backend est√° funcionando!"
        else
          echo "‚ùå Backend n√£o est√° respondendo. Verificando logs..."
          pm2 logs pinovara-backend --lines 20
          rollback
        fi

        # Deploy do frontend
        echo "üé® Deploying frontend..."
        sudo mkdir -p /var/www/html
        sudo rm -rf /var/www/html/*

        # Copy frontend files from deployment directory
        if [ -d "/tmp/frontend-dist" ]; then
          echo "üìã Copiando arquivos do frontend..."
          sudo cp -r /tmp/frontend-dist/* /var/www/html/
          echo "‚úÖ Frontend copiado com sucesso"
        else
          echo "‚ö†Ô∏è Diret√≥rio frontend-dist n√£o encontrado em /tmp/"
          ls -la /tmp/ | grep frontend
        fi

        # Verificar se frontend est√° acess√≠vel
        if curl -f http://localhost/ > /dev/null 2>&1; then
          echo "‚úÖ Frontend est√° funcionando!"
        else
          echo "‚ö†Ô∏è Aviso: Frontend pode n√£o estar configurado corretamente"
        fi

        # Limpar backup ap√≥s deploy bem-sucedido
        rm -rf /var/www/pinovara/backup

        echo "‚úÖ Deploy conclu√≠do com sucesso!"
        echo "üåê Aplica√ß√£o dispon√≠vel em: http://pinovaraufba.com.br"
        EOF

        chmod +x $DEPLOY_DIR/deploy.sh

        # Enviar arquivos para o servidor
        scp -r $DEPLOY_DIR/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

        # Executar deploy no servidor
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash /tmp/deploy.sh'

        # Limpar arquivos tempor√°rios
        rm -rf $DEPLOY_DIR
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'rm -rf /tmp/deploy.sh /tmp/ecosystem.config.js /tmp/package*.json /tmp/dist /tmp/frontend-dist /tmp/config.env /tmp/prisma'

    - name: Verify deployment
      run: |
        echo "üîç Verificando deploy..."

        # Aguardar um pouco mais para garantir que tudo est√° funcionando
        sleep 15

        # Verificar status do PM2
        echo "üìä Verificando status do PM2..."
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'pm2 list'

        # Verificar se o backend est√° rodando
        echo "üîß Verificando backend..."
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "if curl -f --max-time 10 http://localhost:3001/health; then echo '‚úÖ Backend est√° funcionando!'; else echo '‚ùå Backend n√£o est√° respondendo na porta 3001'; pm2 logs pinovara-backend --lines 10; exit 1; fi"

        # Verificar se o frontend est√° acess√≠vel
        echo "üé® Verificando frontend..."
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "if curl -f --max-time 10 http://localhost/; then echo '‚úÖ Frontend est√° funcionando!'; else echo '‚ö†Ô∏è Frontend pode n√£o estar configurado (Nginx necess√°rio)'; echo 'Verificando se os arquivos est√£o no lugar...'; ls -la /var/www/html/ | head -5; fi"

        echo "‚úÖ Deploy verificado com sucesso!"
        echo "üåê Aplica√ß√£o dispon√≠vel em: http://pinovaraufba.com.br"

    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Deploy realizado com sucesso!"
        echo "üìÖ $(date)"
        echo "üîó https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deploy falhou!"
        echo "üìÖ $(date)"
        echo "üîó https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo ""
        echo "Verifique os logs para mais detalhes."

    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.ssh/id_rsa
