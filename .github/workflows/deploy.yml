name: Deploy to Production

# 🚀 PINOVARA Deploy v4.0 - CLEAN & SIMPLE
# ✅ NO BACKUP SYSTEM - Direct deployment only
# ✅ NO COMPLEXITY - Just deploy and go

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 🚀 Starting Clean Deploy v4.0
      run: |
        echo "🎯 PINOVARA Deploy v4.0 - CLEAN & SIMPLE"
        echo "✅ NO backup system - Direct deployment only"
        echo "✅ NO complexity - Just deploy and go"
        echo "📅 $(date)"

    - name: 🔧 Validate Secrets
      run: |
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "❌ SSH_PRIVATE_KEY secret not configured"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "❌ SERVER_HOST secret not configured"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "❌ SERVER_USER secret not configured"
          exit 1
        fi
        echo "✅ All secrets configured"

    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🏗️ Build Backend
      working-directory: ./backend
      run: |
        echo "🔨 Building backend..."
        npm ci
        npm run build
        echo "✅ Backend built successfully"

    - name: 🎨 Build Frontend
      working-directory: ./frontend
      run: |
        echo "🎨 Building frontend..."
        npm ci
        npm run build
        echo "✅ Frontend built successfully"

    - name: 🔐 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: 🚀 Deploy to Server
      run: |
        echo "🚀 Starting deployment to ${{ secrets.SERVER_HOST }}..."

        # Create temp directory
        DEPLOY_DIR="/tmp/pinovara-deploy-$(date +%s)"
        mkdir -p $DEPLOY_DIR

        # Copy files
        echo "📋 Preparing deployment files..."
        cp -r backend/package*.json backend/dist backend/prisma $DEPLOY_DIR/ 2>/dev/null || true
        cp -r frontend/dist $DEPLOY_DIR/frontend-dist 2>/dev/null || true

        # Create env file if config.env exists
        if [ -f "backend/config.env" ]; then
          cp backend/config.env $DEPLOY_DIR/.env
        else
          echo 'NODE_ENV=production' > $DEPLOY_DIR/.env
          echo 'PORT=3001' >> $DEPLOY_DIR/.env
          echo 'DATABASE_URL="postgresql://pinovara:pinovara@bd.amarisufv.com.br:5432/pinovara?schema=pinovara"' >> $DEPLOY_DIR/.env
          echo 'JWT_SECRET="pinovara-secret-key-change-in-production"' >> $DEPLOY_DIR/.env
        fi

        # Create PM2 config
        cat > $DEPLOY_DIR/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'pinovara-backend',
            script: 'dist/server.js',
            cwd: '/var/www/pinovara/backend',
            instances: 1,
            exec_mode: 'fork',
            env: {
              NODE_ENV: 'production',
              PORT: 3001
            }
          }]
        };
        EOF

        # Create deploy script
        cat > $DEPLOY_DIR/deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "🚀 PINOVARA v4.0 - CLEAN DEPLOY STARTING..."
        echo "✅ NO backup system - Direct deployment"

        # Check PM2
        if ! command -v pm2 &> /dev/null; then
          echo "❌ PM2 not installed"
          exit 1
        fi
        echo "✅ PM2 available"

        # Create directories
        sudo mkdir -p /var/www/pinovara

        # Stop existing processes
        pm2 stop pinovara-backend 2>/dev/null || true
        pm2 delete pinovara-backend 2>/dev/null || true

        # Remove old backend
        sudo rm -rf /var/www/pinovara/backend
        sudo mkdir -p /var/www/pinovara/backend

        # Copy files
        echo "📋 Deploying backend files..."
        if [ -f "package.json" ]; then sudo cp package*.json /var/www/pinovara/backend/; fi
        if [ -f ".env" ]; then sudo cp .env /var/www/pinovara/backend/; fi
        if [ -f "ecosystem.config.js" ]; then sudo cp ecosystem.config.js /var/www/pinovara/backend/; fi
        if [ -d "dist" ]; then sudo cp -r dist /var/www/pinovara/backend/; fi
        if [ -d "prisma" ]; then sudo cp -r prisma /var/www/pinovara/backend/; fi

        cd /var/www/pinovara/backend

        # Install dependencies
        echo "📦 Installing dependencies..."
        npm ci --production

        # Database setup
        echo "🗄️ Setting up database..."
        npx prisma generate
        npx prisma db push --accept-data-loss || npx prisma db push

        # Start application
        echo "🚀 Starting application..."
        pm2 start ecosystem.config.js --env production
        pm2 save

        # Deploy frontend
        echo "🎨 Deploying frontend..."
        sudo mkdir -p /var/www/html
        sudo rm -rf /var/www/html/*
        if [ -d "../frontend-dist" ]; then
          sudo cp -r ../frontend-dist/* /var/www/html/
          echo "✅ Frontend deployed"
        else
          echo "⚠️ Frontend files not found"
        fi

        echo "✅ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        EOF

        chmod +x $DEPLOY_DIR/deploy.sh

        # Upload and execute
        scp -r $DEPLOY_DIR ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash /tmp/pinovara-deploy-*/deploy.sh'

        # Cleanup
        rm -rf $DEPLOY_DIR
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'rm -rf /tmp/pinovara-deploy-*'

    - name: ✅ Verify Deployment
      run: |
        echo "🔍 Verifying deployment..."
        sleep 10

        # Check backend
        if ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'curl -f http://localhost:3001/health > /dev/null 2>&1'; then
          echo "✅ Backend is running"
        else
          echo "❌ Backend not responding"
        fi

        # Check frontend
        if ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'curl -f http://localhost/ > /dev/null 2>&1'; then
          echo "✅ Frontend is running"
        else
          echo "⚠️ Frontend may need Nginx configuration"
        fi

        echo "🎉 Deployment verification complete!"