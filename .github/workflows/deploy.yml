name: Deploy to Production

# üöÄ PINOVARA Deploy v4.0 - CLEAN & SIMPLE (Vers√£o Corrigida)
# ‚úÖ L√≥gica de deploy robusta com caminhos corrigidos.
# ‚úÖ Script de execu√ß√£o no servidor mais claro e seguro.

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üöÄ Starting Clean Deploy v4.0
      run: |
        echo "üéØ PINOVARA Deploy v4.0 - CLEAN & SIMPLE"
        echo "‚úÖ NO backup system - Direct deployment only"
        echo "‚úÖ NO complexity - Just deploy and go"
        echo "üìÖ $(date)"

    - name: üîß Validate Secrets
      run: |
        if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
          echo "‚ùå SSH_PRIVATE_KEY secret not configured"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_HOST }}" ]; then
          echo "‚ùå SERVER_HOST secret not configured"
          exit 1
        fi
        if [ -z "${{ secrets.SERVER_USER }}" ]; then
          echo "‚ùå SERVER_USER secret not configured"
          exit 1
        fi
        echo "‚úÖ All secrets configured"

    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: ‚öôÔ∏è Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üèóÔ∏è Build Backend
      working-directory: ./backend
      run: |
        echo "üî® Building backend..."
        npm ci
        npm run build
        echo "‚úÖ Backend built successfully"

    - name: üé® Build Frontend
      working-directory: ./frontend
      run: |
        echo "üé® Building frontend..."
        npm ci
        npm run build
        echo "‚úÖ Frontend built successfully"

    - name: üîê Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to Server
      run: |
        echo "üöÄ Starting deployment to ${{ secrets.SERVER_HOST }}..."

        # 1. Criar um diret√≥rio tempor√°rio no runner do GitHub Actions
        DEPLOY_DIR="/tmp/pinovara-deploy-$(date +%s)"
        mkdir -p $DEPLOY_DIR

        # 2. Copiar todos os artefatos de build para o diret√≥rio tempor√°rio
        echo "üìã Preparing deployment files..."
        cp -r backend/package*.json backend/dist backend/prisma $DEPLOY_DIR/ 2>/dev/null || true
        mkdir -p $DEPLOY_DIR/frontend-dist
        cp -r frontend/dist/* $DEPLOY_DIR/frontend-dist/ 2>/dev/null || true

        # 3. Criar o arquivo .env no diret√≥rio tempor√°rio
        if [ -f "backend/config.env" ]; then
          cp backend/config.env $DEPLOY_DIR/.env
        else
          echo 'NODE_ENV=production' > $DEPLOY_DIR/.env
          echo 'PORT=3001' >> $DEPLOY_DIR/.env
          echo 'DATABASE_URL="postgresql://pinovara:pinovara@bd.pinovaraufba.com.br:5432/pinovara?schema=pinovara"' >> $DEPLOY_DIR/.env
          echo 'JWT_SECRET="pinovara-secret-key-change-in-production"' >> $DEPLOY_DIR/.env
        fi

        # 4. Criar a configura√ß√£o do PM2 no diret√≥rio tempor√°rio
        cat > $DEPLOY_DIR/ecosystem.config.js << 'EOF'
        module.exports = {
          apps: [{
            name: 'pinovara-backend',
            script: 'dist/server.js',
            cwd: '/var/www/pinovara/backend',
            instances: 1,
            exec_mode: 'fork',
            env_production: {
              NODE_ENV: 'production'
            }
          }]
        };
        EOF

        # 5. Criar o script de deploy (com a l√≥gica corrigida) no diret√≥rio tempor√°rio
        cat > $DEPLOY_DIR/deploy.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "üöÄ PINOVARA v4.0 - CLEAN DEPLOY SCRIPT STARTING ON SERVER..."

        # --- CORRE√á√ÉO PRINCIPAL ---
        # Navega para o diret√≥rio onde o script foi salvo no servidor.
        # Isso garante que todos os caminhos relativos (./dist, ./prisma) funcionem.
        cd "$(dirname "$0")"
        echo "üìÇ Working from temporary directory: $(pwd)"

        # Verifica se o PM2 est√° instalado
        if ! command -v pm2 &> /dev/null; then
            echo "‚ùå PM2 not found. Please install it with 'npm install -g pm2'."
            exit 1
        fi
        echo "‚úÖ PM2 is available."

        # --- DEPLOY DO FRONTEND ---
        echo "üé® Deploying frontend..."
        sudo mkdir -p /var/www/html
        sudo rm -rf /var/www/html/*
        if [ -d "./frontend-dist" ]; then
          sudo cp -r ./frontend-dist/* /var/www/html/
          echo "‚úÖ Frontend deployed successfully."
        else
          echo "‚ö†Ô∏è Frontend build files not found in deployment package."
        fi

        # --- DEPLOY DO BACKEND ---
        echo "üöÄ Deploying backend..."
        # Para e deleta o processo antigo para garantir um in√≠cio limpo
        pm2 stop pinovara-backend 2>/dev/null || true
        pm2 delete pinovara-backend 2>/dev/null || true

        # Prepara o diret√≥rio final do backend
        sudo rm -rf /var/www/pinovara/backend
        sudo mkdir -p /var/www/pinovara/backend

        # Copia todos os arquivos do backend do diret√≥rio tempor√°rio para o destino final
        echo "üìã Copying backend files to /var/www/pinovara/backend..."
        sudo cp -r package*.json dist prisma .env ecosystem.config.js /var/www/pinovara/backend/

        # Navega para o diret√≥rio final do backend para executar os pr√≥ximos comandos
        cd /var/www/pinovara/backend
        echo "üìÇ Working from final backend directory: $(pwd)"
        
        # Instala depend√™ncias de produ√ß√£o
        echo "üì¶ Installing production dependencies..."
        npm ci --omit=dev

        # Configura o banco de dados com Prisma
        echo "üóÑÔ∏è Setting up database..."
        npx prisma generate
        npx prisma db push --accept-data-loss

        # Inicia a aplica√ß√£o com PM2
        echo "üöÄ Starting application with PM2..."
        pm2 start ecosystem.config.js --env production
        pm2 save # Salva a configura√ß√£o para reiniciar junto com o servidor

        echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        EOF

        # 6. Tornar o script execut√°vel
        chmod +x $DEPLOY_DIR/deploy.sh

        # 7. Enviar o pacote de deploy para o servidor e executar o script
        scp -r $DEPLOY_DIR ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "bash /tmp/pinovara-deploy-*/deploy.sh"

        # 8. Limpeza dos arquivos tempor√°rios no runner e no servidor
        rm -rf $DEPLOY_DIR
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'rm -rf /tmp/pinovara-deploy-*'

    - name: ‚úÖ Verify Deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 10

        # Verifica o backend
        if ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'curl -f http://localhost:3001/health > /dev/null 2>&1'; then
          echo "‚úÖ Backend is running and healthy"
        else
          echo "‚ùå Backend not responding on http://localhost:3001/health"
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'pm2 logs pinovara-backend --lines 20'
        fi

        # Verifica o frontend
        if ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'curl -f http://localhost/ > /dev/null 2>&1'; then
          echo "‚úÖ Frontend is serving content on port 80"
        else
          echo "‚ö†Ô∏è Frontend not responding. This might be expected if a web server like Nginx is not configured to serve from /var/www/html."
        fi

        echo "üéâ Deployment verification complete!"