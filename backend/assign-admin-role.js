const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkUsersAndAssignAdmin() {
  try {
    console.log('üîç Verificando usu√°rios existentes e estrutura de permiss√µes...\n');

    // Verificar usu√°rios existentes
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        active: true,
        userRoles: {
          include: {
            role: {
              include: {
                module: true
              }
            }
          }
        }
      }
    });

    console.log('=== USU√ÅRIOS EXISTENTES ===');
    users.forEach(user => {
      console.log(`üë§ ${user.name} (${user.email}) - Status: ${user.active ? 'Ativo' : 'Inativo'}`);
      console.log(`   Pap√©is: ${user.userRoles.length > 0 ? user.userRoles.map(ur => `${ur.role.name} (${ur.role.module.name})`).join(', ') : 'Nenhum'}`);
      console.log('');
    });

    // Verificar m√≥dulos e pap√©is
    const modules = await prisma.module.findMany({
      include: {
        roles: true
      }
    });

    console.log('=== M√ìDULOS E PAP√âIS ===');
    modules.forEach(module => {
      console.log(`üì¶ ${module.name}: ${module.roles.map(r => r.name).join(', ')}`);
    });
    console.log('');

    // Verificar se existe o m√≥dulo 'sistema' e papel 'admin'
    const sistemaModule = await prisma.module.findFirst({
      where: { name: 'sistema' },
      include: { roles: true }
    });

    if (!sistemaModule) {
      console.log('‚ùå ERRO: M√≥dulo "sistema" n√£o encontrado!');
      console.log('üìù Criando m√≥dulo sistema...\n');

      // Criar m√≥dulo sistema se n√£o existir
      const newSistemaModule = await prisma.module.create({
        data: {
          name: 'sistema',
          description: 'M√≥dulo principal do sistema PINOVARA'
        }
      });

      console.log('‚úÖ M√≥dulo sistema criado!');
      console.log('üìù Criando papel admin...\n');

      // Criar papel admin
      const adminRole = await prisma.role.create({
        data: {
          name: 'admin',
          description: 'Administrador completo do sistema',
          moduleId: newSistemaModule.id
        }
      });

      console.log(`‚úÖ Papel admin criado (ID: ${adminRole.id})`);
      return await assignAdminToUsers(users, adminRole);
    }

    const adminRole = sistemaModule.roles.find(r => r.name === 'admin');

    if (!adminRole) {
      console.log('‚ùå ERRO: Papel "admin" n√£o encontrado no m√≥dulo sistema!');
      console.log('üìù Criando papel admin...\n');

      // Criar papel admin se n√£o existir
      const newAdminRole = await prisma.role.create({
        data: {
          name: 'admin',
          description: 'Administrador completo do sistema',
          moduleId: sistemaModule.id
        }
      });

      console.log(`‚úÖ Papel admin criado (ID: ${newAdminRole.id})`);
      return await assignAdminToUsers(users, newAdminRole);
    }

    console.log(`‚úÖ M√≥dulo sistema encontrado com papel admin (ID: ${adminRole.id})`);
    return await assignAdminToUsers(users, adminRole);

  } catch (error) {
    console.error('‚ùå Erro durante o processo:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function assignAdminToUsers(users, adminRole) {
  try {
    console.log('\n=== ATRIBUINDO PAPEL ADMIN AOS USU√ÅRIOS ===');

    // Filtrar apenas usu√°rios ativos
    const activeUsers = users.filter(u => u.active);

    if (activeUsers.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio ativo encontrado!');
      return;
    }

    console.log(`üìä Processando ${activeUsers.length} usu√°rios ativos...\n`);

    let assigned = 0;
    let skipped = 0;

    for (const user of activeUsers) {
      // Verificar se j√° tem o papel admin
      const hasAdminRole = user.userRoles.some(ur => ur.role.id === adminRole.id);

      if (hasAdminRole) {
        console.log(`‚è≠Ô∏è  ${user.name} j√° possui papel admin`);
        skipped++;
        continue;
      }

      // Verificar se j√° existe uma associa√ß√£o (por seguran√ßa)
      const existingAssociation = await prisma.userRole.findUnique({
        where: {
          userId_roleId: {
            userId: user.id,
            roleId: adminRole.id
          }
        }
      });

      if (existingAssociation) {
        console.log(`‚è≠Ô∏è  ${user.name} j√° tem associa√ß√£o com papel admin`);
        skipped++;
        continue;
      }

      // Criar a associa√ß√£o
      await prisma.userRole.create({
        data: {
          userId: user.id,
          roleId: adminRole.id
        }
      });

      console.log(`‚úÖ Papel admin atribu√≠do a ${user.name}`);
      assigned++;
    }

    console.log('\nüéâ Processo conclu√≠do!');
    console.log(`üìà Estat√≠sticas:`);
    console.log(`   ‚Ä¢ Pap√©is atribu√≠dos: ${assigned}`);
    console.log(`   ‚Ä¢ Usu√°rios pulados: ${skipped}`);
    console.log(`   ‚Ä¢ Total processado: ${activeUsers.length}`);

    // Verificar resultado final
    console.log('\nüîç Verifica√ß√£o final:');
    const finalUsers = await prisma.user.findMany({
      where: { active: true },
      select: {
        id: true,
        name: true,
        email: true,
        userRoles: {
          include: {
            role: {
              include: {
                module: true
              }
            }
          }
        }
      }
    });

    finalUsers.forEach(user => {
      const hasAdmin = user.userRoles.some(ur => ur.role.name === 'admin' && ur.role.module.name === 'sistema');
      console.log(`${hasAdmin ? '‚úÖ' : '‚ùå'} ${user.name} - ${hasAdmin ? 'Admin' : 'Sem admin'}`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao atribuir pap√©is:', error);
    throw error;
  }
}

// Executar a fun√ß√£o
checkUsersAndAssignAdmin().catch(console.error);
