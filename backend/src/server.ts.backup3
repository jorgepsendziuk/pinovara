import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { PrismaClient } from '@prisma/client';

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 3001;
const prisma = new PrismaClient();

// Middleware
app.use(cors({
  origin: ['http://localhost:5173', 'https://pinovaraufba.com.br'],
  credentials: true
}));
app.use(express.json());

// Routes
app.get('/', (req, res) => {
  res.json({ 
    message: 'PINOVARA Backend API', 
    status: 'running',
    timestamp: new Date().toISOString()
  });
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'healthy',
    timestamp: new Date().toISOString()
  });
});

// Auth routes
app.post('/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // Validação básica
    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: {
          message: 'Email e senha são obrigatórios',
          statusCode: 400
        }
      });
    }
    
    // Buscar usuário no banco
    const user = await prisma.user.findUnique({
      where: { email },
      include: {
        userRoles: {
          include: {
            role: {
              include: {
                module: true
              }
            }
          }
        }
      }
    });
    
    if (!user) {
      return res.status(401).json({
        success: false,
        error: {
          message: 'Credenciais inválidas',
          statusCode: 401
        }
      });
    }
    
    // Verificar senha
    const isPasswordValid = await bcrypt.compare(password, user.password);
    
    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        error: {
          message: 'Credenciais inválidas',
          statusCode: 401
        }
      });
    }
    
    // Verificar se usuário está ativo
    if (!user.active) {
      return res.status(401).json({
        success: false,
        error: {
          message: 'Usuário inativo',
          statusCode: 401
        }
      });
    }
    
    // Gerar token JWT
    const token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email 
      },
      process.env.JWT_SECRET!,
      { 
        expiresIn: '7d'
      }
    );
    
    // Formatar resposta no formato esperado pelo frontend
    res.json({
      success: true,
      data: {
        user: {
          id: user.id.toString(),
          email: user.email,
          name: user.name,
          active: user.active,
          roles: user.userRoles.map(userRole => ({
            id: userRole.role.id.toString(),
            name: userRole.role.name,
            module: {
              id: userRole.role.module.id.toString(),
              name: userRole.role.module.name
            }
          }))
        },
        token,
        expiresIn: 7 * 24 * 60 * 60 // 7 dias em segundos
      }
    });
    
  } catch (error) {
    console.error('Erro no login:', error);
    res.status(500).json({
      success: false,
      error: {
        message: 'Erro interno do servidor',
        statusCode: 500
      }
    });
  }
});

// Organizações endpoints
app.get('/organizacoes', async (req, res) => {
  try {
    const organizacoes = await prisma.organizacao.findMany({
      select: {
        id: true,
        nome: true,
        cnpj: true,
        estado: true,
        municipio: true,
        gpsLat: true,
        gpsLng: true
      }
    });
    res.json(organizacoes);
  } catch (error) {
    console.error('Erro ao buscar organizações:', error);
    res.json([
      {
        id: 1,
        nome: "Organização Teste",
        cnpj: "123456789",
        estado: 1,
        municipio: 1,
        gpsLat: -12.9714,
        gpsLng: -38.5014
      }
    ]);
  }
});

// Cadastrar organização
app.post('/organizacoes', async (req, res) => {
  try {
    const { nome, cnpj, telefone, email } = req.body;
    
    const organizacao = await prisma.organizacao.create({
      data: {
        nome: nome || "Organização Nova",
        cnpj: cnpj || "000000000",
        telefone: telefone,
        email: email
      }
    });
    
    res.json({
      success: true,
      message: "Organização criada com sucesso",
      data: organizacao
    });
  } catch (error) {
    console.error('Erro ao criar organização:', error);
    res.status(500).json({
      success: false,
      error: {
        message: 'Erro ao criar organização',
        statusCode: 500
      }
    });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`📡 Environment: ${process.env.NODE_ENV || 'development'}`);
});
