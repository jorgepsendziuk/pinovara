const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createUserTypes() {
  console.log('üë• Criando apenas os 6 tipos principais de usu√°rio...\n');

  try {
    // Criar um m√≥dulo especial para os tipos de usu√°rio
    const userTypesModule = await prisma.module.upsert({
      where: { name: 'user_types' },
      update: {
        description: 'M√≥dulo especial para defini√ß√£o dos tipos de usu√°rio e suas permiss√µes'
      },
      create: {
        name: 'user_types',
        description: 'M√≥dulo especial para defini√ß√£o dos tipos de usu√°rio e suas permiss√µes'
      }
    });

    console.log(`‚úÖ M√≥dulo especial criado: ${userTypesModule.name} (ID: ${userTypesModule.id})`);

    // Criar apenas os 6 tipos de usu√°rio
    const userTypes = [
      {
        name: 'tecnico',
        description: 'T√©cnico de campo - acesso ao m√≥dulo de t√©cnicos',
        permissions: ['tecnicos']
      },
      {
        name: 'pesquisa',
        description: 'Pesquisador - acesso aos m√≥dulos de pesquisa, dashboard, diagn√≥stico, relat√≥rios, mapas (visualiza√ß√£o)',
        permissions: ['pesquisa', 'dashboard', 'diagnostico', 'relatorios', 'mapas']
      },
      {
        name: 'associados',
        description: 'Gestor de associados - acesso ao m√≥dulo de associados',
        permissions: ['associados']
      },
      {
        name: 'administracao',
        description: 'Administrador - acesso total a todos os m√≥dulos',
        permissions: ['*'] // * significa todos os m√≥dulos
      },
      {
        name: 'gestao',
        description: 'Gestor - visualiza√ß√£o de todos os m√≥dulos',
        permissions: ['*'] // * significa todos os m√≥dulos
      },
      {
        name: 'geoprocessamento',
        description: 'Geoprocessador - edi√ß√£o de mapas e visualiza√ß√£o de dados geoespaciais',
        permissions: ['mapas', 'dashboard', 'diagnostico', 'relatorios']
      }
    ];

    console.log('\nüè∑Ô∏è Criando os 6 tipos de usu√°rio:');

    for (const userType of userTypes) {
      const role = await prisma.role.create({
        data: {
          name: userType.name,
          description: userType.description,
          moduleId: userTypesModule.id,
        },
      });

      console.log(`‚úÖ ${role.name}: ${role.description}`);
      console.log(`   üìã Permiss√µes: [${userType.permissions.join(', ')}]`);
    }

    console.log('\nüéØ Resumo dos tipos criados:');
    console.log('1. üë∑ T√âCNICO - acesso: t√©cnicos');
    console.log('2. üî¨ PESQUISA - acesso: pesquisa, dashboard, diagn√≥stico, relat√≥rios, mapas');
    console.log('3. üë• ASSOCIADOS - acesso: associados');
    console.log('4. ‚öôÔ∏è ADMINISTRA√á√ÉO - acesso: TODOS os m√≥dulos');
    console.log('5. üìä GEST√ÉO - acesso: TODOS os m√≥dulos (visualiza√ß√£o)');
    console.log('6. üó∫Ô∏è GEOPROCESSAMENTO - acesso: mapas (edi√ß√£o) + dashboard, diagn√≥stico, relat√≥rios');

    console.log('\nüìä Verificando cria√ß√£o:');
    const totalRoles = await prisma.role.count();
    console.log(`‚úÖ Total de roles criados: ${totalRoles} (deveria ser 6)`);

  } catch (error) {
    console.error('‚ùå Erro ao criar tipos de usu√°rio:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createUserTypes();
