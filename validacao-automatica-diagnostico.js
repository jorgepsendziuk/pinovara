const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Mapeamento dos campos que foram corrigidos
const camposCorrigidos = {
  // Governan√ßa - Controles Internos (P22-P27)
  'go_controle_20': 'go_controle_22', // P22
  'go_controle_21': 'go_controle_23', // P23
  'go_controle_22': 'go_controle_24', // P24
  'go_controle_23': 'go_controle_25', // P25
  'go_controle_24': 'go_controle_26', // P26
  'go_controle_25': 'go_controle_27', // P27
  
  // Governan√ßa - Educa√ß√£o (P28-P30)
  'go_educacao_26': 'go_educacao_28', // P28
  'go_educacao_27': 'go_educacao_29', // P29
  'go_educacao_28': 'go_educacao_30', // P30
  
  // Gest√£o Comercial - Estrat√©gia (P16-P21)
  'gc_comercial_15': 'gc_comercial_16', // P16
  'gc_comercial_16': 'gc_comercial_17', // P17
  'gc_comercial_17': 'gc_comercial_18', // P18
  'gc_comercial_18': 'gc_comercial_19', // P19
  'gc_comercial_19': 'gc_comercial_20', // P20
  'gc_comercial_20': 'gc_comercial_21', // P21
  
  // Gest√£o Comercial - Modelo (P22-P28)
  'gc_modelo_21': 'gc_modelo_22', // P22
  'gc_modelo_22': 'gc_modelo_23', // P23
  'gc_modelo_23': 'gc_modelo_24', // P24
  'gc_modelo_24': 'gc_modelo_25', // P25
  'gc_modelo_25': 'gc_modelo_26', // P26
  'gc_modelo_26': 'gc_modelo_27', // P27
  'gc_modelo_27': 'gc_modelo_28', // P28
};

// Textos das perguntas para valida√ß√£o
const textosPerguntas = {
  // Governan√ßa - Controles Internos
  'go_controle_22': 'O conselho fiscal √© atuante no empreendimento?',
  'go_controle_23': 'A dire√ß√£o se re√∫ne periodicamente com o conselho fiscal?',
  'go_controle_24': 'A dire√ß√£o tem o h√°bito de apresentar periodicamente relat√≥rios cont√°beis, financeiros e administrativos?',
  'go_controle_25': 'Realiza assembleias anuais para presta√ß√£o de contas?',
  'go_controle_26': 'Possui mecanismos de controle, monitoramento e avalia√ß√£o do alcance de objetivos e metas?',
  'go_controle_27': 'H√° canais para d√∫vidas e sugest√µes em rela√ß√£o aos relat√≥rios e informa√ß√µes compartilhados?',
  
  // Governan√ßa - Educa√ß√£o
  'go_educacao_28': 'Existe processo de forma√ß√£o continuada dos cooperados/associados?',
  'go_educacao_29': 'Os cooperados/associados s√£o capacitados em Gest√£o do Empreendimento?',
  'go_educacao_30': 'H√° planos para identificar, capacitar e preparar novos l√≠deres?',
  
  // Gest√£o Comercial - Estrat√©gia
  'gc_comercial_16': 'Adota estrat√©gias comerciais definidas?',
  'gc_comercial_17': 'Os produtos/empreendimento possuem marca comercial?',
  'gc_comercial_18': 'Realiza ou utiliza pesquisa/estudo de mercado?',
  'gc_comercial_19': 'Conhece os concorrentes e acompanha pre√ßos?',
  'gc_comercial_20': 'Possui plano de marketing?',
  'gc_comercial_21': 'Realiza promo√ß√µes e divulga√ß√£o dos produtos/servi√ßos?',
  
  // Gest√£o Comercial - Modelo
  'gc_modelo_22': 'Existe regularidade nas vendas, com contratos permanentes?',
  'gc_modelo_23': 'Possui Modelo de Neg√≥cio definido?',
  'gc_modelo_24': 'Tem definido p√∫blico-alvo e canais de comercializa√ß√£o?',
  'gc_modelo_25': 'Possui estrat√©gias de precifica√ß√£o baseadas em custos e mercado?',
  'gc_modelo_26': 'Tem controle de qualidade dos produtos/servi√ßos?',
  'gc_modelo_27': 'Possui sistema de p√≥s-venda e relacionamento com clientes?',
  'gc_modelo_28': 'Tem estrat√©gias para diversifica√ß√£o de produtos/servi√ßos?',
};

// Regras de valida√ß√£o baseadas no contexto das perguntas
const regrasValidacao = {
  // Governan√ßa - Controles Internos
  'go_controle_22': { min: 1, max: 4, descricao: 'Conselho fiscal atuante' },
  'go_controle_23': { min: 1, max: 4, descricao: 'Reuni√µes com conselho fiscal' },
  'go_controle_24': { min: 1, max: 4, descricao: 'Apresenta√ß√£o de relat√≥rios' },
  'go_controle_25': { min: 1, max: 4, descricao: 'Assembleias anuais' },
  'go_controle_26': { min: 1, max: 4, descricao: 'Mecanismos de controle' },
  'go_controle_27': { min: 1, max: 4, descricao: 'Canais de d√∫vidas e sugest√µes' },
  
  // Governan√ßa - Educa√ß√£o
  'go_educacao_28': { min: 1, max: 4, descricao: 'Forma√ß√£o continuada' },
  'go_educacao_29': { min: 1, max: 4, descricao: 'Capacita√ß√£o em gest√£o' },
  'go_educacao_30': { min: 1, max: 4, descricao: 'Prepara√ß√£o de novos l√≠deres' },
  
  // Gest√£o Comercial - Estrat√©gia
  'gc_comercial_16': { min: 1, max: 4, descricao: 'Estrat√©gias comerciais' },
  'gc_comercial_17': { min: 1, max: 4, descricao: 'Marca comercial' },
  'gc_comercial_18': { min: 1, max: 4, descricao: 'Pesquisa de mercado' },
  'gc_comercial_19': { min: 1, max: 4, descricao: 'Conhecimento de concorrentes' },
  'gc_comercial_20': { min: 1, max: 4, descricao: 'Plano de marketing' },
  'gc_comercial_21': { min: 1, max: 4, descricao: 'Promo√ß√µes e divulga√ß√£o' },
  
  // Gest√£o Comercial - Modelo
  'gc_modelo_22': { min: 1, max: 4, descricao: 'Regularidade nas vendas' },
  'gc_modelo_23': { min: 1, max: 4, descricao: 'Modelo de neg√≥cio' },
  'gc_modelo_24': { min: 1, max: 4, descricao: 'P√∫blico-alvo e canais' },
  'gc_modelo_25': { min: 1, max: 4, descricao: 'Estrat√©gias de precifica√ß√£o' },
  'gc_modelo_26': { min: 1, max: 4, descricao: 'Controle de qualidade' },
  'gc_modelo_27': { min: 1, max: 4, descricao: 'Sistema de p√≥s-venda' },
  'gc_modelo_28': { min: 1, max: 4, descricao: 'Diversifica√ß√£o de produtos' },
};

async function validarDadosAutomaticamente() {
  try {
    console.log('üîç INICIANDO VALIDA√á√ÉO AUTOM√ÅTICA DOS DADOS DO DIAGN√ìSTICO\n');
    console.log('=' .repeat(80));
    
    // Buscar organiza√ß√µes validadas
    const organizacoesValidadas = await prisma.organizacao.findMany({
      where: { validacao_status: 3 },
      select: { id: true, nome: true },
      orderBy: { id: 'asc' }
    });

    console.log(`üìä Organiza√ß√µes validadas encontradas: ${organizacoesValidadas.length}\n`);

    let totalCorrecoes = 0;
    let totalValidacoes = 0;

    for (const org of organizacoesValidadas) {
      console.log(`üè¢ Organiza√ß√£o ID ${org.id}: ${org.nome}`);
      
      // Buscar dados completos da organiza√ß√£o
      const orgCompleta = await prisma.organizacao.findUnique({
        where: { id: org.id }
      });

      if (!orgCompleta) {
        console.log('   ‚ùå Organiza√ß√£o n√£o encontrada\n');
        continue;
      }

      let correcoesOrg = 0;
      let validacoesOrg = 0;

      // Validar cada campo corrigido
      for (const [campoAntigo, campoNovo] of Object.entries(camposCorrigidos)) {
        const valorAntigo = orgCompleta[`${campoAntigo}_resposta`];
        const valorNovo = orgCompleta[`${campoNovo}_resposta`];
        
        if (valorAntigo !== null && valorAntigo !== undefined) {
          validacoesOrg++;
          
          // Verificar se o valor faz sentido para a pergunta atual
          const regra = regrasValidacao[campoNovo];
          if (regra && (valorAntigo < regra.min || valorAntigo > regra.max)) {
            console.log(`   ‚ö†Ô∏è  Campo ${campoNovo}: Valor ${valorAntigo} fora do range (${regra.min}-${regra.max})`);
            console.log(`      Pergunta: ${textosPerguntas[campoNovo]}`);
            console.log(`      Descri√ß√£o: ${regra.descricao}`);
            
            // Sugerir corre√ß√£o baseada no contexto
            let valorSugerido = valorAntigo;
            if (valorAntigo < regra.min) {
              valorSugerido = regra.min;
            } else if (valorAntigo > regra.max) {
              valorSugerido = regra.max;
            }
            
            console.log(`      üí° Valor sugerido: ${valorSugerido}`);
            
            // Aplicar corre√ß√£o automaticamente
            try {
              await prisma.organizacao.update({
                where: { id: org.id },
                data: {
                  [`${campoNovo}_resposta`]: valorSugerido,
                  [`${campoNovo}_comentario`]: orgCompleta[`${campoAntigo}_comentario`] || '',
                  [`${campoNovo}_proposta`]: orgCompleta[`${campoAntigo}_proposta`] || ''
                }
              });
              
              console.log(`      ‚úÖ Corre√ß√£o aplicada: ${valorAntigo} ‚Üí ${valorSugerido}`);
              correcoesOrg++;
            } catch (error) {
              console.log(`      ‚ùå Erro ao aplicar corre√ß√£o: ${error.message}`);
            }
          } else {
            console.log(`   ‚úÖ Campo ${campoNovo}: Valor ${valorAntigo} v√°lido`);
          }
        }
      }

      console.log(`   üìä Corre√ß√µes aplicadas: ${correcoesOrg}/${validacoesOrg}\n`);
      totalCorrecoes += correcoesOrg;
      totalValidacoes += validacoesOrg;
    }

    console.log('=' .repeat(80));
    console.log('üìã RESUMO DA VALIDA√á√ÉO AUTOM√ÅTICA');
    console.log('=' .repeat(80));
    console.log(`üìä Total de valida√ß√µes: ${totalValidacoes}`);
    console.log(`üîß Total de corre√ß√µes aplicadas: ${totalCorrecoes}`);
    console.log(`‚úÖ Organiza√ß√µes processadas: ${organizacoesValidadas.length}`);
    
    if (totalCorrecoes > 0) {
      console.log('\nüéØ VALIDA√á√ÉO CONCLU√çDA COM CORRE√á√ïES');
      console.log('As corre√ß√µes foram aplicadas automaticamente no banco de dados.');
    } else {
      console.log('\nüéØ VALIDA√á√ÉO CONCLU√çDA SEM CORRE√á√ïES');
      console.log('Todos os dados estavam corretos!');
    }

  } catch (error) {
    console.error('‚ùå Erro durante a valida√ß√£o:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

validarDadosAutomaticamente();
